// Mocks generated by Mockito 5.4.2 from annotations
// in hive_and_api_for_class/test/features/auth/presentation/view/login_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:hive_and_api_for_class/core/failure/failure.dart' as _i7;
import 'package:hive_and_api_for_class/features/batch/domain/entity/batch_entity.dart'
    as _i8;
import 'package:hive_and_api_for_class/features/batch/domain/repository/batch_repository.dart'
    as _i2;
import 'package:hive_and_api_for_class/features/batch/domain/use_case/batch_use_case.dart'
    as _i5;
import 'package:hive_and_api_for_class/features/course/domain/entity/course_entity.dart'
    as _i10;
import 'package:hive_and_api_for_class/features/course/domain/repository/course_repository.dart'
    as _i4;
import 'package:hive_and_api_for_class/features/course/domain/use_case/course_usecase.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIBatchRepository_0 extends _i1.SmartFake
    implements _i2.IBatchRepository {
  _FakeIBatchRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeICourseRepository_2 extends _i1.SmartFake
    implements _i4.ICourseRepository {
  _FakeICourseRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BatchUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockBatchUseCase extends _i1.Mock implements _i5.BatchUseCase {
  @override
  _i2.IBatchRepository get batchRepository => (super.noSuchMethod(
        Invocation.getter(#batchRepository),
        returnValue: _FakeIBatchRepository_0(
          this,
          Invocation.getter(#batchRepository),
        ),
        returnValueForMissingStub: _FakeIBatchRepository_0(
          this,
          Invocation.getter(#batchRepository),
        ),
      ) as _i2.IBatchRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i8.BatchEntity>>> getAllBatches() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllBatches,
          [],
        ),
        returnValue:
            _i6.Future<_i3.Either<_i7.Failure, List<_i8.BatchEntity>>>.value(
                _FakeEither_1<_i7.Failure, List<_i8.BatchEntity>>(
          this,
          Invocation.method(
            #getAllBatches,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Either<_i7.Failure, List<_i8.BatchEntity>>>.value(
                _FakeEither_1<_i7.Failure, List<_i8.BatchEntity>>(
          this,
          Invocation.method(
            #getAllBatches,
            [],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, List<_i8.BatchEntity>>>);
  @override
  _i6.Future<_i3.Either<_i7.Failure, bool>> addBatch(_i8.BatchEntity? batch) =>
      (super.noSuchMethod(
        Invocation.method(
          #addBatch,
          [batch],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
            _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #addBatch,
            [batch],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
                _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #addBatch,
            [batch],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, bool>>);
  @override
  _i6.Future<_i3.Either<_i7.Failure, bool>> deleteBatch(String? batchId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteBatch,
          [batchId],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
            _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #deleteBatch,
            [batchId],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
                _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #deleteBatch,
            [batchId],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, bool>>);
  @override
  _i6.Future<_i3.Either<_i7.Failure, bool>> updateBatch(
    String? batchId,
    _i8.BatchEntity? batch,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBatch,
          [
            batchId,
            batch,
          ],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
            _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #updateBatch,
            [
              batchId,
              batch,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
                _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #updateBatch,
            [
              batchId,
              batch,
            ],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, bool>>);
}

/// A class which mocks [CourseUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCourseUseCase extends _i1.Mock implements _i9.CourseUseCase {
  @override
  _i4.ICourseRepository get courseRepository => (super.noSuchMethod(
        Invocation.getter(#courseRepository),
        returnValue: _FakeICourseRepository_2(
          this,
          Invocation.getter(#courseRepository),
        ),
        returnValueForMissingStub: _FakeICourseRepository_2(
          this,
          Invocation.getter(#courseRepository),
        ),
      ) as _i4.ICourseRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, bool>> addCourse(
          _i10.CourseEntity? course) =>
      (super.noSuchMethod(
        Invocation.method(
          #addCourse,
          [course],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
            _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #addCourse,
            [course],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
                _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #addCourse,
            [course],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, bool>>);
  @override
  _i6.Future<
      _i3
          .Either<_i7.Failure, List<_i10.CourseEntity>>> getAllCourses() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllCourses,
          [],
        ),
        returnValue:
            _i6.Future<_i3.Either<_i7.Failure, List<_i10.CourseEntity>>>.value(
                _FakeEither_1<_i7.Failure, List<_i10.CourseEntity>>(
          this,
          Invocation.method(
            #getAllCourses,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Either<_i7.Failure, List<_i10.CourseEntity>>>.value(
                _FakeEither_1<_i7.Failure, List<_i10.CourseEntity>>(
          this,
          Invocation.method(
            #getAllCourses,
            [],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, List<_i10.CourseEntity>>>);
  @override
  _i6.Future<_i3.Either<_i7.Failure, bool>> deleteCourse(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteCourse,
          [id],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
            _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #deleteCourse,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
                _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #deleteCourse,
            [id],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, bool>>);
  @override
  _i6.Future<_i3.Either<_i7.Failure, bool>> updateCourse(
    String? courseId,
    _i10.CourseEntity? course,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCourse,
          [
            courseId,
            course,
          ],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
            _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #updateCourse,
            [
              courseId,
              course,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
                _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #updateCourse,
            [
              courseId,
              course,
            ],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, bool>>);
}
